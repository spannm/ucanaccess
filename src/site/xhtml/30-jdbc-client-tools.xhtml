<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>JDBC Client Tools</title>
    </head>
    <body>
        <h1>JDBC Client Tools</h1>

        <h2>Using the UCanAccess command-line console</h2>
        <p>
            Execute <i>console.bat </i>(Windows) or <i>console.sh </i>(Linux/Unix) in the distribution to run the
            command-line tool (main class: <i>net.ucanaccess.console.Main</i>). It will prompt you to enter the path to
            the Access DB file. Once it reads in the database file, it will print out a prompt. You can enter SQL queries
            or commands at this prompt. All queries and commands end with a semicolon (";").
        </p>
        <p>An SQL query looks like this:
            <code>UCanAccess&gt;SELECT * FROM License;</code>
        </p>
        <p>
            You can export the result of the most recent SQL query to a CSV file using the <code>export</code>
            command:
            <code>UCanAccess&gt;export License.csv;</code>
        </p>
        <p>
            The <code>export</code> command supports a number of flags, which are described by the <code>--help</code> flag:
        </p>
        <pre>
UCanAccess&gt;export --help;
Usage: export [--help] [--bom] [-d &lt;delimiter&gt;] [-t &lt;table&gt;] [--big_query_schema &lt;pathToSchemaFile&gt;] [--newlines] &lt;pathToCsv&gt;;
Export the most recent SQL query to the given &lt;pathToCsv&gt; file.
  -d &lt;delimiter&gt; Set the CSV column delimiter (default: ';').
  -t &lt;table&gt;     Output the &lt;table&gt; instead of the previous query.
  --big_query_schema &lt;schemaFile&gt;  Output the BigQuery schema to &lt;schemaFile&gt;.
  --bom          Output the UTF-8 byte order mark.
  --newlines     Preserve embedded newlines (\r, \n).
  --help         Print this help message.
Single (') or double (&quot;) quoted strings are supported.
Backslash (\) escaping (e.g. \n, \t) is enabled within quotes.
Use two backslashes (\\) to insert one backslash within quotes (e.g. &quot;c:\\temp\\newfile.csv&quot;).</pre>
        <p>
            <strong>-d &lt;delimiter&gt;</strong> By default the delimiter between columns in the CSV file is the semicolon (;)
            for historical reasons. If you want to change this to a comma, use this flag like this:
            <code>UCanAccess&gt;export -d , License.csv;</code>
        </p>
        <p>
            <strong>-t &lt;table&gt;</strong> By default the export command uses the result set of the previous SQL command. This
            flag sends the given &lt;table&gt; to the CSV file by executing the SQL query <code>SELECT
            * FROM [table]</code>. For example,
            <code>UCanAccess&gt;export -t License License.csv;</code>
        </p>
        <p>
            <strong>-big_query_schema &lt;schemaFile&gt;</strong> This flag generates the JSON formatted schema file which
            contains the data type information (e.g. "string", "integer") of each column which are required by <a
                href="https://cloud.google.com/bigquery/">Google BigQuery</a>. This schema file can be used by the <a
                href="https://cloud.google.com/bigquery/bq-command-line-tool">BigQuery load tool</a>. For example,
            <code>UCanAccess&gt;export -d , -t License --big_query_schema License.schema License.csv;
            </code>
            will generate two files, <code>License.csv</code> and <code>License.schema</code>.
            These can be imported into Google BigQuery using the <code>bq load</code> command like
            this:
            <code>$ bq load --skip_leading_rows=1 mydataset.License License.csv License.schema</code>
        </p>
        <p>
            <strong>--bom</strong> The CSV file will be encoded in UTF-8 format. Microsoft Excel does not support UTF-8 encoding
            unless the file contains a <a href="http://unicode.org/faq/utf_bom.html#BOM">Byte Order Mark</a>. This flag
            produces that byte order mark (EF BB BF).
            <code>UCanAccess&gt;export --bom -t License License.csv;</code>
        </p>
        <p>
            <strong>--newlines</strong> By default any embedded newlines (\n or \r, in other words, ASCII characters 0x0A and 0x0D
            respectively) are converted into a space character in the CSV file. This is because many CSV readers are not
            able to read multi-line records. This flag preserves newline characters by enclosing them in double-quote
            characters.
            <code>UCanAccess&gt;export --newlines -t License License.csv;</code>
            Microsoft Excel supports newline characters within quotes. Google BigQuery requires the
            <code>--allow_quoted_newlines</code> flag to be given, like this:
            <code>$ bq load --allow_quoted_newlines --skip_leading_rows=1 mydataset.License
            License.csv License.schema
            </code>
        </p>
        <p>
            <strong>Quotes</strong> The export command supports single or double quotes in the arguments, which allows table names
            and file names to contain embedded spaces and other special characters. For example, the command
            <code>UCanAccess&gt;export -d '\t' -t "License and Address" 'License and Address.csv';</code>
            exports the table named "License and Address" to a file named "License and Address.csv", using the TAB
            character as a delimiter between columns.
        </p>
        <p>Within the quotes, backslash escaping of the following special characters are supported:
        </p>
        <ul>
            <li>'\a' - bell (0x07)</li>
            <li>'\b' - backspace (0x08)</li>
            <li>'\f' - form feed (0x0C)</li>
            <li>'\n' - newline (0x0A)</li>
            <li>'\r' - carriage return (0x0D)</li>
            <li>'\t' - tab (0x09)</li>
            <li>'\v' - vertical tab (0x0B)</li>
            <li>'\\' - backslash (\, 0x5C))</li>
            <li>'\nn', '\nnn' - octal character escapes</li>
        </ul>
        <p>In Windows, the backslash character is the file path separator. If we use quotes, we need to use two
            backslashes to represent one backslash of a Windows file path. For example the following two commands are
            identical:
            <code>
            UCanAccess&gt;export -t License c:\temp\new\License.csv;
            UCanAccess&gt;export -t License "c:\\temp\\new\\License.csv";
            </code>
        </p>

        <h2>DBeaver</h2>
        <p>
            DBeaver (Universal Database Manager) will automatically download and install UCanAccess as the default MS
            Access driver. <br/> <br/>DBeaver web site: <a href="https://dbeaver.io/">https://dbeaver.io/</a>
        </p>

        <h2>SQLeo</h2>
        <p>
            UcanAccess 2.0.2 has been successfully tested with the SQLeo Visual Query Builder.<br/> <br/>SQLeo
            project: <a href="https://sourceforge.net/projects/sqleo/">https://sourceforge.net/projects/sqleo/</a>
        </p>

        <h2>LibreOffice Base / OpenOffice Base</h2>
        <p>
            For detailed instructions on how to configure LibreOffice Base or OpenOffice Base with UCanAccess please see
            <a href="http://askubuntu.com/questions/187389/is-it-possible-to-open-an-access-2010-database-file-without-using-wine-or-virtua/519571#519571">this
            question on Ask Ubuntu</a>.<br/> <br/>OpenOffice web site: <a href="http://www.openoffice.org">http://www.openoffice.org</a><br/>
            LibreOffice web site: <a href="http://www.libreoffice.org/">http://www.libreoffice.org/</a>
        </p>

        <h2>
            Using UCanAccess as NetBeans Service
        </h2>
        <p>
            Integration tested with UCanAccess 2.0.4.1. It doesn't work with previous UCanAccess versions.
        </p>
        <p>
            1) Define a new Driver in the Netbeans "Services" tab: <i>Services &gt; Databases &gt; Drivers
            &gt; New Driver...</i>
        </p>
        <p>
            2) In the field <i>"Driver File(s)"</i> add "ucanaccess-<i>x</i>.<i>y</i>.<i>z</i>.jar" <strong>and
            all dependencies</strong> (all jars in the <code>lib/</code> folder of the UCanAccess
            distribution: "hsqldb.jar", "jackcess-<i>x</i>.<i>y</i>.<i>z</i>.jar").<br/><br/>
            Setting the field <i>Driver Class</i>: <code>net.ucanaccess.jdbc.UcanaccessDriver</code>
        </p>
        <p>
            3) Create a connection using the following JDBC Connection URL examples:<br/>
            Windows local path:
            <code>jdbc:ucanaccess://C:/Users/Public/Database1.accdb;showSchema=true</code>
            <br/><br/>
            Windows UNC path:
            <code>jdbc:ucanaccess:////servername/sharename/foldername/Database1.accdb;showSchema=true</code>
            <br/><br/>
            Linux/Unix:
            <code>jdbc:ucanaccess:///home/gord/Documents/Database1.accdb;showSchema=true</code>

            (Notice that the <code>showSchema</code> connection property must be set to <code>true</code>.)<br/><br/>
            4) Now you can see your db tables listed in the PUBLIC schema.<br/><br/>
            NetBeans web site: <a href="https://netbeans.org">https://netbeans.org</a>
        </p>

        <h2>
            Squirrel SQL
        </h2>
        <p>
            For detailed instructions on how to configure Squirrel SQL with UCanAccess please see <a
                href="http://stackoverflow.com/a/36608661/2144390">this answer on Stack Overflow</a>.<br/>
            <br/> Squirrel SQL web site: <a href="http://www.squirrelsql.org/">http://www.squirrelsql.org/</a> <br/>
        </p>
    </body>
</html>
