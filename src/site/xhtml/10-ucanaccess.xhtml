<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html lang="en" xml:lang="en" xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF8" />
        <meta name="keywords" content="Access, jdbc, driver, Java, mdb, accdb, ms, linux, Unix, mac, pure" />
        <title>About UCanAccess</title>
    </head>
    <body>
        <h1>About UCanAccess</h1>

        <p>This is the home page of UCanAccess, an open-source Java JDBC driver implementation that allows Java
            developers and JDBC client programs (e.g., DBeaver, NetBeans, SQLeo, OpenOffice Base, LibreOffice Base,
            Squirrel SQL) to read/write Microsoft Access databases.
        </p>
        <p>
            Because it is a pure Java implementation it runs on both Windows and non-Windows operating systems (e.g.,
            Linux/Unix). <strong>No ODBC needed</strong>. UCanAccess uses:
        </p>
        <ul>
            <li>Jackcess as Microsoft Access input/output library (link: <a href="https://github.com/spannm/jackcess/">https://github.com/spannm/jackcess/</a>)</li>
            <li>HSQLDB (aka HyperSQL) as synchronized DBMS (link: <a href="http://hsqldb.org/">http://hsqldb.org/</a>)</li>
        </ul>
        <h2>Features</h2>
        <ul>
            <li>Supported Access formats: 2000, 2002/2003, 2007, 2010/2013/2016 databases. (Access 97 format supported for <strong>read-only</strong>)</li>
            <li>SELECT, INSERT, UPDATE, DELETE statements. Transactions and savepoints.</li>
            <li>Access data types: YESNO, BYTE, INTEGER, LONG, SINGLE, DOUBLE, NUMERIC, CURRENCY, COUNTER,
                TEXT, OLE, MEMO, GUID, DATETIME.
            </li>
            <li>Concurrent access from multiple application server threads.</li>
            <li>Connection pooling.</li>
            <li>ANSI 92 SQL, core SQL-2008.</li>
            <li>Access SQL.</li>
            <li>Core built-in functions for Access SQL are supported (e.g., <code>Date()</code>,
                <code>Now()</code>, <code>IIf()</code>, ...).
            </li>
            <li>You can execute Select queries defined and saved in Access. Since version 1.0.1, UCanAccess can
                execute Crosstab queries (<code>TRANSFORM ... PIVOT ...</code>)
            </li>
            <li>LIKE operator accepts both standard <code>%</code> and Access-specific <code>*</code> as multi-character wildcards, both standard <code>_</code>
                and Access-specific <code>?</code> as single-character wildcards, <code>#</code> for single digit and <code>[xxx][!xxx]</code> for character
                intervals (Access).
            </li>
            <li>Both <code>&amp;</code> and <code>+</code> (Access SQL) as well
                as <code>||</code> (ANSI SQL) for string concatenation.
            </li>
            <li>Square brackets for field names, table names and view names (saved Access queries) that include
                spaces or other special characters, e.g., <code>SELECT [my column] FROM [my
                table]</code>.
            </li>
            <li>Access date format (e.g., <code>#11/22/2003 10:42:58 PM#</code>).</li>
            <li>Both double quote <code>"</code> and single quote <code>'</code>
                as SQL string delimiters.
            </li>
            <li>Read and write support to complex types (i.e., array of Version, Attachment, SingleValue).</li>
            <li>Since version 2.0.1, UCanAccess supports both constants and functions as default column values in
                <code>CREATE TABLE</code> statements e.g. <code>CREATE TABLE tbl (fld1 TEXT PRIMARY
                KEY, fld2 LONG DEFAULT 3 NOT NULL, fld3 TEXT(255) NOT NULL, fld4 DATETIME DEFAULT Now(), fld5 TEXT
                DEFAULT 'bla')</code>
            </li>
            <li>Command-line console ("console.bat" and "console.sh"). You can run SQL commands and display their
                results. CSV export command included.
            </li>
        </ul>
        <h2>Limitations</h2>
        <ul>
            <li>Access
                <a href="https://support.office.com/en-us/article/Create-a-data-macro-b1b94bca-4f17-47ad-a66d-f296ef834200">data macros</a>
                are not supported. UCanAccess can update tables for which event-driven data macros are defined, but the macros
                themselves are ignored.
            </li>
            <li>
                In versions prior to UCanAccess 4.0.0, only basic DDL was supported (<code>CREATE TABLE</code>
                with Primary Key, <code>DROP TABLE</code>).<br/>
                Since version 4.0.0 UCanAccess can now support DDL for <strong>Table metadata modification</strong>:
                <ul>
                    <li>Columns, Primary Keys and other Indexes can now be added to an <strong>existing</strong> table.</li>
                    <li>UCanAccess 4.x.x has also the ability to create Foreign Keys and to rename Tables.</li>
                </ul>
            </li>
            <li>Very limited multiprocess access support (details
                <a href="http://ucanaccess.blogspot.ca/2017/07/multiuser-concurrent-write-access.html">here</a>).
                Nevertheless, it tries to synchronize data when a concurrent process modifies the Access database file.
            </li>
        </ul>
        <h2>Requirements</h2>
        <p>
            <strong>From version 5.1.0 UCanAccess requires Java 11 or later to run.</strong><br/>
            From version 5.0.0 Java 8 or later is required, while older versions require at least Java 6.
        </p>
        <p>
            When dealing with large databases and using the default "memory" setting (i.e., with driver property <code>memory=true</code>), it is recommended that users allocate sufficient memory to the JVM
            using the <code>-Xms</code> and <code>-Xmx</code> options. <b><br/>
            Otherwise it will be necessary to set the driver's "memory" property to "false":</b><br/>
            <br/> <code>Connection conn = DriverManager.getConnection("jdbc:ucanaccess://c:/data/myaccessdb.mdb;memory=false");</code><br/>
        </p>
        <p>
            <strong>Note:</strong> If you're working with especially large files
            or in memory-constrained environments, and performance
            with <code>memory=false</code> is not acceptable, consider using
            the <a href="https://github.com/spannm/jackcess/">Jackcess</a>
            library directly for low-level access. This bypasses the in-memory
            HSQLDB layer and can significantly reduce memory usage while
            improving performance.
        </p>
        <h2>Dependencies</h2>
        <p>
            UCanAccess depends on Jackcess and HSQLDB. If you are using
            <a href="https://maven.apache.org">Apache Maven</a> to manage your dependencies (recommended)
            simply add the following to your pom.xml:<br/>
        </p>
        <pre>
&lt;dependency&gt;
    &lt;groupId&gt;io.github.spannm&lt;/groupId&gt;
    &lt;artifactId&gt;ucanaccess&lt;/artifactId&gt;
    &lt;version&gt;5.1.3&lt;/version&gt;
&lt;/dependency&gt;</pre>
        <p>
            Maven will add the other dependencies for you. If you are manually managing your classpath,
            you will need to add the <code>ucanaccess-5.2.0.jar</code> file along with its dependencies to your classpath.
        </p>
        <p>
            In order to open encrypted files you must use UCanAccess 2.x.x or later with jackcess-encrypt-2.x.x and
            all related dependencies. Again, if you are using Maven, simply add this extra dependency:
        </p>
        <pre>
&lt;dependency&gt;
    &lt;groupId&gt;com.healthmarketscience.jackcess&lt;/groupId&gt;
    &lt;artifactId&gt;jackcess-encrypt&lt;/artifactId&gt;
    &lt;version&gt;4.0.2&lt;/version&gt;
&lt;/dependency&gt;</pre>
    </body>
</html>
